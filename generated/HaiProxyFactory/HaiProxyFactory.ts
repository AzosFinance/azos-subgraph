// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Created extends ethereum.Event {
  get params(): Created__Params {
    return new Created__Params(this);
  }
}

export class Created__Params {
  _event: Created;

  constructor(event: Created) {
    this._event = event;
  }

  get _sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _proxy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class HaiProxyFactory extends ethereum.SmartContract {
  static bind(address: Address): HaiProxyFactory {
    return new HaiProxyFactory("HaiProxyFactory", address);
  }

  build(): Address {
    let result = super.call("build", "build():(address)", []);

    return result[0].toAddress();
  }

  try_build(): ethereum.CallResult<Address> {
    let result = super.tryCall("build", "build():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  build1(_owner: Address): Address {
    let result = super.call("build", "build(address):(address)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toAddress();
  }

  try_build1(_owner: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("build", "build(address):(address)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isProxy(_proxyAddress: Address): boolean {
    let result = super.call("isProxy", "isProxy(address):(bool)", [
      ethereum.Value.fromAddress(_proxyAddress)
    ]);

    return result[0].toBoolean();
  }

  try_isProxy(_proxyAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isProxy", "isProxy(address):(bool)", [
      ethereum.Value.fromAddress(_proxyAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class BuildCall extends ethereum.Call {
  get inputs(): BuildCall__Inputs {
    return new BuildCall__Inputs(this);
  }

  get outputs(): BuildCall__Outputs {
    return new BuildCall__Outputs(this);
  }
}

export class BuildCall__Inputs {
  _call: BuildCall;

  constructor(call: BuildCall) {
    this._call = call;
  }
}

export class BuildCall__Outputs {
  _call: BuildCall;

  constructor(call: BuildCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Build1Call extends ethereum.Call {
  get inputs(): Build1Call__Inputs {
    return new Build1Call__Inputs(this);
  }

  get outputs(): Build1Call__Outputs {
    return new Build1Call__Outputs(this);
  }
}

export class Build1Call__Inputs {
  _call: Build1Call;

  constructor(call: Build1Call) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Build1Call__Outputs {
  _call: Build1Call;

  constructor(call: Build1Call) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
